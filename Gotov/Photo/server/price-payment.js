const express = require('express');
const cors = require('cors');
const stripe = require('stripe')('sk_test_51QtvkrFVPhunSiwWBySTsuFLUlkby6Q7HVaHLurJHjSy4tT1ekgKVKPOcbVt9JtobCpm2ANVWPgFm2UUZW0xNZrv001csGRZzj');
const axios = require('axios');
require('dotenv').config();
const fetch = require('node-fetch');

const app = express();
const port = 1234;

app.use(express.json());
app.use(cors());

let reservedTimes = {};

// –†–µ–∑–µ—Ä–≤–∞—Ü–∏—è + –∏–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ –∏–º–µ–π–ª–∏
app.post('/reserve', async (req, res) => {
    const { email, name, date, time, sessionType, sessionSize, paymentMethod, price, discountMessage } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∏–º–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–∞–Ω–∏ —á–∞—Å–æ–≤–µ –∑–∞ —Ç–∞–∑–∏ –¥–∞—Ç–∞
    if (!reservedTimes[date]) {
        reservedTimes[date] = [];
    }

    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∏–∑–±—Ä–∞–Ω–∏—è—Ç —á–∞—Å –≤–µ—á–µ –µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–∞–Ω
    if (reservedTimes[date].includes(time)) {
        return res.status(400).send({ message: '–ß–∞—Å—ä—Ç –µ –≤–µ—á–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–∞–Ω!' });
    }

    // –î–æ–±–∞–≤—è–º–µ –Ω–æ–≤–∞—Ç–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è
    reservedTimes[date].push(time);

    // –ü–æ–¥–≥–æ—Ç–≤—è–º–µ —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ –∑–∞ –∏–º–µ–π–ª–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
    const message = {
        sender: { email: 'dimitarhristev20b@gmail.com' },
        to: [{ email: email }],
        subject: '–í–∞—à–∞—Ç–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è',
        htmlContent: `
            <html>
                <body>
                    <h1>–†–µ–∑–µ—Ä–≤–∞—Ü–∏—è—Ç–∞ –í–∏ –µ —É—Å–ø–µ—à–Ω–∞!</h1>
                    <p><strong>–ò–º–µ:</strong> ${name}</p>
                    <p><strong>–î–∞—Ç–∞:</strong> ${date}</p>
                    <p><strong>–ß–∞—Å:</strong> ${time}</p>
                    <p><strong>–¢–∏–ø —Ñ–æ—Ç–æ—Å–µ—Å–∏—è:</strong> ${sessionType}</p>
                    <p><strong>–í–∏–¥ –Ω–∞ —Å–µ—Å–∏—è—Ç–∞:</strong> ${sessionSize}</p>
                    <p><strong>–ù–∞—á–∏–Ω –Ω–∞ –ø–ª–∞—â–∞–Ω–µ:</strong> ${paymentMethod === 'card' ? '–° –∫–∞—Ä—Ç–∞' : '–ù–∞–ª–æ–∂–µ–Ω –ø–ª–∞—Ç–µ–∂'}</p>
                    <p><strong>–¶–µ–Ω–∞:</strong> ${price} –ª–≤</p>
                    ${discountMessage ? `<p><strong>–û—Ç—Å—Ç—ä–ø–∫–∞:</strong> ${discountMessage}</p>` : ''}
                </body>
            </html>`
    };

    // –ü–æ–¥–≥–æ—Ç–≤—è–º–µ —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ –∑–∞ –∏–º–µ–π–ª–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const adminMessage = {
        sender: { email: 'dimitarhristev20b@gmail.com' },
        to: [{ email: 'dimitarhristev20b@gmail.com' }],
        subject: '‚ùó –ù–æ–≤–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è ‚ùó',
        htmlContent: `
            <html>
                <body>
                    <h1>–ù–æ–≤–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è!</h1>
                    <p><strong>–ò–º–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:</strong> ${name}</p>
                    <p><strong>–ò–º–µ–π–ª –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:</strong> ${email}</p>
                    <p><strong>–î–∞—Ç–∞:</strong> ${date}</p>
                    <p><strong>–ß–∞—Å:</strong> ${time}</p>
                    <p><strong>–¢–∏–ø —Ñ–æ—Ç–æ—Å–µ—Å–∏—è:</strong> ${sessionType}</p>
                    <p><strong>–í–∏–¥ –Ω–∞ —Å–µ—Å–∏—è—Ç–∞:</strong> ${sessionSize}</p>
                    <p><strong>–ù–∞—á–∏–Ω –Ω–∞ –ø–ª–∞—â–∞–Ω–µ:</strong> ${paymentMethod === 'card' ? '–° –∫–∞—Ä—Ç–∞' : '–ù–∞–ª–æ–∂–µ–Ω –ø–ª–∞—Ç–µ–∂'}</p>
                    <p><strong>–¶–µ–Ω–∞:</strong> ${price} –ª–≤</p>
                    ${discountMessage ? `<p><strong>–û—Ç—Å—Ç—ä–ø–∫–∞:</strong> ${discountMessage}</p>` : ''}
                    <hr>
                    <p>üìå –¢–∞–∑–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è –±–µ—à–µ –Ω–∞–ø—Ä–∞–≤–µ–Ω–∞ –ø—Ä–µ–∑ —Å–∞–π—Ç–∞.</p>
                </body>
            </html>`
    };

    try {
        // –ò–∑–ø—Ä–∞—â–∞–º–µ –∏–º–µ–π–ª–∏—Ç–µ
        await axios.post(
            'https://api.brevo.com/v3/smtp/email',
            message,
            {
                headers: {
                    'Content-Type': 'application/json',
                    'api-key': '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'
                }
            }
        );

        await axios.post(
            'https://api.brevo.com/v3/smtp/email',
            adminMessage,
            {
                headers: {
                    'Content-Type': 'application/json',
                    'api-key': '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'
                }
            }
        );

        res.status(200).json({ message: '–†–µ–∑–µ—Ä–≤–∞—Ü–∏—è—Ç–∞ –µ —É—Å–ø–µ—à–Ω–∞, –∏–º–µ–π–ª–∏—Ç–µ —Å–∞ –∏–∑–ø—Ä–∞—Ç–µ–Ω–∏!' });
    } catch (error) {
        console.error(error.response ? error.response.data : error.message);
        res.status(500).json({ message: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ –∏–º–µ–π–ª', error: error.response ? error.response.data : error.message });
    }
});

// GET endpoint –∑–∞ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–∞–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ
app.get('/get-reserved-times', (req, res) => {
    res.status(200).json(reservedTimes);
});


// –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ Stripe PaymentIntent
app.post('/create-payment-intent', async (req, res) => {
    const { price } = req.body;
    console.log("–ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç –∑–∞ price:", price); // –õ–æ–≥ –∑–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç—Ç–∞ –Ω–∞ price

    try {
        if (!price || isNaN(price)) {
            console.log("–ù–µ–≤–∞–ª–∏–¥–Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç –∑–∞ price");
            return res.status(400).send({
                message: '–¶–µ–Ω–∞—Ç–∞ –µ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∞ –∏ —Ç—Ä—è–±–≤–∞ –¥–∞ –±—ä–¥–µ —á–∏—Å–ª–æ–≤–∞.',
            });
        }

        const paymentIntent = await stripe.paymentIntents.create({
            amount: price * 100, // –ü—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–Ω–µ –Ω–∞ —Ü–µ–Ω–∞—Ç–∞ –≤ —Å—Ç–æ—Ç–∏–Ω–∫–∏
            currency: 'BGN',
            metadata: { integration_check: 'accept_a_payment' },
        });

        console.log('PaymentIntent —É—Å–ø–µ—à–Ω–æ —Å—ä–∑–¥–∞–¥–µ–Ω:', paymentIntent); // –õ–æ–≥ –Ω–∞ —É—Å–ø–µ—à–Ω–æ—Ç–æ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ PaymentIntent
        
        res.status(200).send({
            clientSecret: paymentIntent.client_secret,
        });
    } catch (error) {
        console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ PaymentIntent:', error); // –õ–æ–≥ –Ω–∞ –≥—Ä–µ—à–∫–∞—Ç–∞
        res.status(500).send({
            message: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ PaymentIntent',
            error: error.message,
        });
    }
});

// –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ hCaptcha
app.post('/verify-hcaptcha', async (req, res) => {
    const { hcaptchaResponse } = req.body;

    try {
        const response = await fetch('https://api.hcaptcha.com/siteverify', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: new URLSearchParams({
                secret: 'ES_5746b88b07cc466e858d75a94899b68b',
                response: hcaptchaResponse,
            }),
        });

        const data = await response.json();

        if (data.success) {
            res.status(200).json({ message: 'hCaptcha validation successful' });
        } else {
            res.status(400).json({ message: 'hCaptcha validation failed', data });
        }
    } catch (error) {
        res.status(500).json({ message: 'Server error', error });
    }
});

const apiKey = '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';

app.post('/subscribe', async (req, res) => {
    const { email } = req.body;
    console.log('–ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –∑–∞ –∞–±–æ–Ω–∞–º–µ–Ω—Ç:', req.body);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –∏–º–µ–π–ª –∞–¥—Ä–µ—Å
    if (!email || !validateEmail(email)) {
        return res.status(400).json({ message: '–ù–µ–≤–∞–ª–∏–¥–µ–Ω –∏–º–µ–π–ª –∞–¥—Ä–µ—Å' });
    }

    const userMessage = `–¢–æ–∑–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª —Å–µ –µ –∞–±–æ–Ω–∏—Ä–∞–ª —Å –∏–º–µ–π–ª: ${email}`;
    const userConfirmationMessage = '–í–∏–µ —É—Å–ø—è—Ö—Ç–µ –¥–∞ —Å–µ –∞–±–æ–Ω–∏—Ä–∞—Ç–µ —É—Å–ø–µ—à–Ω–æ! –°–ª–µ–¥–µ—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞ –Ω–∏ –∑–∞ –ø–æ–≤–µ—á–µ –ø—Ä–æ–º–æ—Ü–∏–∏.';

    // –°—ä–æ–±—â–µ–Ω–∏–µ –∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const adminMessage = {
        sender: { email: "dimitarhristev20b@gmail.com" },
        to: [{ email: "dimitarhristev20b@gmail.com" }],
        subject: "–ù–æ–≤ –∞–±–æ–Ω–∞–º–µ–Ω—Ç",
        htmlContent: `
            <html>
                <body>
                    <h1>–ù–æ–≤ –∞–±–æ–Ω–∞–º–µ–Ω—Ç</h1>
                    <p>${userMessage}</p>
                </body>
            </html>`
    };

    // –°—ä–æ–±—â–µ–Ω–∏–µ –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –∫—ä–º –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
    const userMessageForUser = {
        sender: { email: "dimitarhristev20b@gmail.com" },
        to: [{ email: email }],
        subject: "–£—Å–ø–µ—à–µ–Ω –∞–±–æ–Ω–∞–º–µ–Ω—Ç",
        htmlContent: `
            <html>
                <body>
                    <h1>–£—Å–ø–µ—à–Ω–æ —Å–µ –∞–±–æ–Ω–∏—Ä–∞—Ö—Ç–µ!</h1>
                    <p>${userConfirmationMessage}</p>
                </body>
            </html>`
    };

    try {
        // –ò–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ –∏–º–µ–π–ª –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        const adminResponse = await fetch('https://api.brevo.com/v3/smtp/email', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'api-key': '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'
            },
            body: JSON.stringify(adminMessage)
        });

        // –ò–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ –∏–º–µ–π–ª –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
        const userResponse = await fetch('https://api.brevo.com/v3/smtp/email', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'api-key': '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'
            },
            body: JSON.stringify(userMessageForUser)
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –∏–º–µ–π–ª–∏—Ç–µ —Å–∞ –∏–∑–ø—Ä–∞—Ç–µ–Ω–∏ —É—Å–ø–µ—à–Ω–æ
        if (adminResponse.ok && userResponse.ok) {
            res.status(200).json({ message: '–£—Å–ø–µ—à–Ω–æ —Å–µ –∞–±–æ–Ω–∏—Ä–∞—Ö—Ç–µ!' });
        } else {
            const errorData = await adminResponse.json();
            res.status(500).json({ message: `–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–ø—Ä–∞—â–∞–Ω–µ—Ç–æ –Ω–∞ –∏–º–µ–π–ª–∞: ${errorData.message}` });
        }
    } catch (error) {
        console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–ø—Ä–∞—â–∞–Ω–µ—Ç–æ –Ω–∞ –∏–º–µ–π–ª–∞:', error);
        res.status(500).json({ message: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–ø—Ä–∞—â–∞–Ω–µ—Ç–æ –Ω–∞ –∑–∞—è–≤–∫–∞—Ç–∞.' });
    }
});

// –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –∏–º–µ–π–ª
function validateEmail(email) {
    const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return regex.test(email);
}

app.listen(port, () => {
    console.log(`–°—ä—Ä–≤—ä—Ä—ä—Ç —Ä–∞–±–æ—Ç–∏ –Ω–∞ –ø–æ—Ä—Ç ${port}`);
});